1                                                       The SAS System                         14:56 Wednesday, August 23, 2017

1          ;*';*";*/;quit;run;
2          OPTIONS PAGENO=MIN;
3          %LET _CLIENTTASKLABEL='Partition pairs comparator';
4          %LET _CLIENTPROJECTPATH='C:\Users\avonva\Desktop\Pairs on DWH.egp';
5          %LET _CLIENTPROJECTNAME='Pairs on DWH.egp';
6          %LET _SASPROGRAMFILE=;
7          
8          ODS _ALL_ CLOSE;
9          OPTIONS DEV=ACTIVEX;
10         GOPTIONS XPIXELS=0 YPIXELS=0;
11         FILENAME EGSR TEMP;
12         ODS tagsets.sasreport13(ID=EGSR) FILE=EGSR STYLE=HtmlBlue
12       ! STYLESHEET=(URL="file:///C:/Program%20Files/SASHome/x86/SASEnterpriseGuide/5.1/Styles/HtmlBlue.css") NOGTITLE
12       ! NOGFOOTNOTE GPATH=&sasworklocation ENCODING=UTF8 options(rolap="on");
NOTE: Writing TAGSETS.SASREPORT13(EGSR) Body file: EGSR
13         
14         GOPTIONS ACCESSIBLE;
15         
16         /* Create the pairs. For each partition we create all the possible
17          * pairs. The distances are also calculated there while creating pairs.
18          * Note that it is useless to compare record 1 with record 2 and then
19          * record 2 with record 1, since this will create a duplicate pair. The
20          * algorithm uses an ordered dataset, in order to be able to create just
21          * the necessary pairs. In particular, if we have 1,2,3,4,5 the algorithm
22          * will compare: 1 with 2,3,4,5; 2 with 3,4,5; 3 with 4,5 and 4 with 5.
23          *
24          * Note that records with the same TRX_ID are not used to create pairs
25          */
26         data myLib.TRN_PAIRS;
27         	
28         	set myLib.&dataset nobs=size;
29         
30         	/* point to the next row (avoid self comparison) */
31         	currentRow = _N_ + 1;
32         
33         	/* just compute for 15982 partitions (about 1000000 records)*/
34         	/*if ( PARTITION_ID >= 8040 ) then do;
35         		stop;
36         	end;*/
37         
38         	/* Compare the current record with all the other records
39         	 * contained in the same partition with a different TRX_ID
40         	 */
41         	do while( currentRow <= size );
42         
43         		/* point to the next record (the macro renames all the variables
44         	     * of the other record with a "2" suffix) */
45         		set myLib.&dataset ( %addSuffixToVariables(&vlist, 2) ) point=currentRow;
46         
47         		/* do not compare rows if different partition id or equal transmission id */
48         
49         		/* different partition => stop go to next row of data step */
50         		if ( PARTITION_ID ^= PARTITION_ID2 ) then do;
51         			leave;
52         		end;
53         
54         		/* go to next line if equal trx id (avoid comparisons between same TRX_ID!) */
55         		if ( TRX_ID = TRX_ID2 ) then do;
56         			currentRow = currentRow + 1;
57         			continue;
58         		end;
59         
60         		array param_unks[3] _temporary_;
61         		param_unks[1] = &paramUnk1;
62         		param_unks[2] = &paramUnk2;
63         		param_unks[3] = &paramUnk3;
64         
65         		array foodex_unks[1] _temporary_;
2                                                       The SAS System                         14:56 Wednesday, August 23, 2017

66         		foodex_unks[1] = -1;
67         
68         		/* Compute foodex and param distances */
69         		%addHierarchyDist(ANALYSISLEVEL, _ID, _ID2, FOODEX_HIER_DIST, 1, 4, foodex_unks);
70         		%addHierarchyDist(PARAMCODE, _ID, _ID2, PARAMCODE_HIER_DIST, 1, 7, param_unks);
71         
72         		/* Remove records which test different foods or params. This is indeed
73         		 * a partition extension. We could not test this things before since
74         		 * we did not have the pairs */
75         		if ( FOODEX_HIER_DIST = 1 | PARAMCODE_HIER_DIST = 1 ) then do;
76         			currentRow = currentRow + 1;
77         			continue;
78         		end;
79         
80         		/* Here compute distances between records inside the same partition and
81         		 * different transmission id (and same param/foodex) */
82         
83         		/* equal/not equal comparisons, unknown not allowed */
84         		FILENAME_DIST = (FILENAME ^= FILENAME2);
85         		LABSAMPLE_KEY_ID_DIST = (LABSAMPLE_KEY_ID ^= LABSAMPLE_KEY_ID2);
86         		LABSUBSAMPCODE_DIST = (LABSUBSAMPCODE ^= LABSUBSAMPCODE2);
87         		LANG_DIST = (LANG ^= LANG2);
88         		PARAMTYPE_DIST = (PARAMTYPE ^= PARAMTYPE2);
89         		RESVALUNCERT_DIST = (RESVALUNCERT ^= RESVALUNCERT2); /* just equal since it is a noisy field */
90         		RESLEGALLIMIT_DIST = (RESLEGALLIMIT ^= RESLEGALLIMIT2); /* just equal since are standard values */
91         
92         
93         
94         		/* equal/not equal distances, unknown treated as neutral distance */
95         
96         		/* prod method */
97         		array prod_meth_unk[3] _temporary_;
98         		prod_meth_unk[1] = -1; /* default missing value for catalogues */
99         		prod_meth_unk[2] = &UNK_prodmeth1;
100        		prod_meth_unk[3] = &UNK_prodmeth2;
101        		PRODMETH_DIST = numEqual(PRODPRODMETH, PRODPRODMETH2, prod_meth_unk);
102        
103        		/* prod package */
104        		array prod_pack_unk[3] _temporary_;
105        		prod_pack_unk[1] = -1; /* default missing value for catalogues */
106        		prod_pack_unk[2] = &UNK_prodpack;
107        		PRODPACK_DIST = numEqual(PRODPACK, PRODPACK2, prod_pack_unk);
108        
109        		/* sampling strategy */
110        		array samp_strat_unk[3] _temporary_;
111        		samp_strat_unk[1] = -1;
112        		samp_strat_unk[2] = &UNK_sampstrat1;
113        		samp_strat_unk[3] = &UNK_sampstrat2;
114        		PROGSAMPSTRATEGY_DIST = numEqual(PROGSAMPSTRATEGY, PROGSAMPSTRATEGY2, samp_strat_unk);
115        
116        		/* 0 is the unknown for years months days... */
117        		array date_unknowns[1] _temporary_;
118        		date_unknowns[1] = 0;
119        
120        		PRODY_DIST = numEqual(PRODY, PRODY2, date_unknowns);
121        		PRODM_DIST = numEqual(PRODM, PRODM2, date_unknowns);
122        		PRODD_DIST = numEqual(PRODD, PRODD2, date_unknowns);
123        
124        		EXPIRY_DIST = numEqual(EXPIRY, EXPIRY2, date_unknowns);
125        		EXPIRM_DIST = numEqual(EXPIRM, EXPIRM2, date_unknowns);
126        		EXPIRD_DIST = numEqual(EXPIRD, EXPIRD2, date_unknowns);
127        
128        		SAMPY_DIST = numEqual(SAMPY, SAMPY2, date_unknowns);
129        		SAMPM_DIST = numEqual(SAMPM, SAMPM2, date_unknowns);
130        		SAMPD_DIST = numEqual(SAMPD, SAMPD2, date_unknowns);
131        
132        		ANALYSISY_DIST = numEqual(ANALYSISY, ANALYSISY2, date_unknowns);
133        		ANALYSISM_DIST = numEqual(ANALYSISM, ANALYSISM2, date_unknowns);
3                                                       The SAS System                         14:56 Wednesday, August 23, 2017

134        		ANALYSISD_DIST = numEqual(ANALYSISD, ANALYSISD2, date_unknowns);
135        
136        		/* sample number */
137        		array samp_num_unk[2] _temporary_;
138        		samp_num_unk[1] = .;
139        		samp_num_unk[2] = 0;
140        		SAMPLENUM_DIST = numEqual(SAMPLENUM, SAMPLENUM2, samp_num_unk);
141        
142        		/* lot size, combine both lotsize and lotsizeunit for the comparison */
143        		array lot_size_unk[2] _temporary_;
144        		lot_size_unk[1] = .;
145        		lot_size_unk[2] = -1;
146        		LOTSIZE_DIST = unitDistance(LOTSIZEUNIT, LOTSIZE, LOTSIZEUNIT2, LOTSIZE2, lot_size_unk);
147        
148        
149        		/* lod and loq, these values are defined by some rules and should not vary due to humans mistake => equals is
149      ! sufficient */
150        		array res_lod_loq_unk[1] _temporary_;
151        		res_lod_loq_unk[1] = .;
152        		RESLOD_DIST = numEqual(RESLOD, RESLOD2, res_lod_loq_unk);
153        		RESLOQ_DIST = numEqual(RESLOQ, RESLOQ2, res_lod_loq_unk);
154        
155        		/* expression of result */
156        		array express_unk[1] _temporary_;
157        		express_unk[1] = -1;
158        		EXPRRES_DIST = numEqual(EXPRRES, EXPRRES2, express_unk);
159        
160        		/* Result qualitative value */
161        		array resqual_value_unk[1] _temporary_;
162        		resqual_value_unk[1] = -1;
163        		RESQUALVALUE_DIST = numEqual(RESQUALVALUE, RESQUALVALUE2, resqual_value_unk);
164        
165        		/* type of result */
166        		array restype_unk[1] _temporary_;
167        		restype_unk[1] = -1;
168        		RESTYPE_DIST = numEqual(RESTYPE, RESTYPE2, restype_unk);
169        
170        		/* type of legal limit */
171        		array legallimit_type_unk[1] _temporary_;
172        		legallimit_type_unk[1] = -1;
173        		RESLEGALLIMITTYPE_DIST = numEqual(RESLEGALLIMITTYPE, RESLEGALLIMITTYPE2, legallimit_type_unk);
174        
175        
176        		/* evaluation of the result */
177        		array reseval_unk[2] _temporary_;
178        		reseval_unk[1] = -1;
179        		reseval_unk[2] = &UNK_res_evaluation;
180        		RESEVALUATION_DIST = numEqual(RESEVALUATION, RESEVALUATION2, reseval_unk);
181        
182        
183        		/* action taken */
184        		array action_taken_unk[2] _temporary_;
185        		action_taken_unk[1] = -1;
186        		action_taken_unk[2] = &UNK_action;
187        		ACTTAKENCODE_DIST = numEqual(ACTTAKENCODE, ACTTAKENCODE2, action_taken_unk);
188        
189        
190        		/* type of legal limit */
191        		array legallimit_unk[1] _temporary_;
192        		legallimit_unk[1] = .;
193        		RESLEGALLIMITTYPE_DIST = numEqual(RESLEGALLIMITTYPE, RESLEGALLIMITTYPE2, legallimit_unk);
194        
195        
196        
197        
198        		/* Strings EQUAL distances */
199        
200        		/* Lab code, just check if equal or unknown (it is a code, string similarity does not make any sense)*/
4                                                       The SAS System                         14:56 Wednesday, August 23, 2017

201        		array lab_code_unk[1] $ _temporary_;
202        		lab_code_unk[1] = 'N_A';
203        		LABCODE_DIST = strEqual(LABCODE, LABCODE2, lab_code_unk);
204        
205        
206        
207        
208        		/* contains distances */
209        
210        		/* It could happen that one code is contained into the other,
211        		 * we take into account this possibility */
212        		array contained_unk[1] $ _temporary_;
213        		contained_unk[1] = "";
214        		LABSAMPCODE_DIST = isContainedDist(LABSAMPCODE, LABSAMPCODE2, contained_unk);
215        		RESULTCODE_DIST = isContainedDist(RESULTCODE, RESULTCODE2, contained_unk);
216        
217        
218        
219        
220        		/* compute country distances */
221        
222        		SAMPCOUNTRY_DIST = getCountryDist(SAMPCOUNTRYCODE, SAMPCOUNTRYCODE2, MEMBEROFEU, MEMBEROFEU2, MEMBEROFEEA,
222      ! MEMBEROFEEA2);
223        
224        		ORIGCOUNTRY_DIST = getCountryDist(ORIGCOUNTRYCODE, ORIGCOUNTRYCODE2, ORIGCOUNTRYEU, ORIGCOUNTRYEU2,
224      ! ORIGCOUNTRYEEA, ORIGCOUNTRYEEA2);
225        
226        		PROCCOUNTRY_DIST = getCountryDist(PROCCOUNTRYCODE, PROCCOUNTRYCODE2, PROCCOUNTRYEU, PROCCOUNTRYEU2,
226      ! PROCCOUNTRYEEA, PROCCOUNTRYEEA2);
227        
228        		LABCOUNTRY_DIST = getCountryDist(LABCOUNTRYCODE, LABCOUNTRYCODE2, LABCOUNTRYEU, LABCOUNTRYEU2, LABCOUNTRYEEA,
228      ! LABCOUNTRYEEA2);
229        
230        		LOCALORGCOUNTRY_DIST = getCountryDist(LOCALORGCOUNTRYCODE, LOCALORGCOUNTRYCODE2, LOCALORGCOUNTRYEU,
231        									LOCALORGCOUNTRYEU2, LOCALORGCOUNTRYEEA, LOCALORGCOUNTRYEEA2);
232        
233        
234        
235        		/* prepare the unknown values for each catalogue */
236        		array nuts_unks[5] _temporary_;
237        		nuts_unks[1] = &nutsUnk1;
238        		nuts_unks[2] = &nutsUnk2;
239        		nuts_unks[3] = &nutsUnk3;
240        		nuts_unks[4] = &nutsUnk4;
241        		nuts_unks[5] = &nutsUnk5;
242        
243        		array farea_unks[1] _temporary_;
244        		farea_unks[1] = &fareaUnk1;
245        
246        		array prodtr_unks[1] _temporary_;
247        		prodtr_unks[1] = &prodtrUnk1;
248        
249        		array prgtyp_unks[2] _temporary_;
250        		prgtyp_unks[1] = &prgtypUnk1;
251        		prgtyp_unks[2] = &prgtypUnk2;
252        
253        		array sampmd_unks[2] _temporary_;
254        		sampmd_unks[1] = &sampmdUnk1;
255        		sampmd_unks[2] = &sampmdUnk2;
256        
257        		array sampnt_unks[4] _temporary_;
258        		sampnt_unks[1] = &sampntUnk1;
259        		sampnt_unks[2] = &sampntUnk2;
260        		sampnt_unks[3] = &sampntUnk3;
261        		sampnt_unks[4] = &sampntUnk4;
262        		
263        		array anlymd_unks[2] _temporary_;
264        		anlymd_unks[1] = &anlymdUnk1;
5                                                       The SAS System                         14:56 Wednesday, August 23, 2017

265        		anlymd_unks[2] = &anlymdUnk2;
266        
267        		%addHierarchyDist(SAMPAREA, _ID, _ID2, SAMPAREA_HIER_DIST, 1, 5, nuts_unks);
268        		%addHierarchyDist(ORIGAREA, _ID, _ID2, ORIGAREA_HIER_DIST, 1, 5, nuts_unks);
269        		%addHierarchyDist(ORIGFISHAREAID, _ID, _ID2, ORIGFISHAREA_HIER_DIST, 1, 6, farea_unks);
270        		%addHierarchyDist(PROCAREA, _ID, _ID2, PROCAREA_HIER_DIST, 1, 5, nuts_unks);
271        		%addProdTreatHierDist(PRODTREAT, _ID, _ID2, PRODTREAT_HIER_DIST, 1, 3, prodtr_unks);
272        		%addHierarchyDist(PROGTYPE, _ID, _ID2, PROGTYPE_HIER_DIST, 1, 2, prgtyp_unks);
273        		%addHierarchyDist(SAMPMETHOD, _ID, _ID2, SAMPMETHOD_HIER_DIST, 1, 1, sampmd_unks);
274        		%addHierarchyDist(SAMPPOINT, _ID, _ID2, SAMPPOINT_HIER_DIST, 1, 4, sampnt_unks);
275        		%addHierarchyDist(ANMETHCODE, _ID, _ID2, ANMETHCODE_HIER_DIST, 1, 5, anlymd_unks);
276        
277        		/* String distances */
278        
279        		array strings_unk[2] $ _temporary_;
280        		strings_unk[1] = 'N_A';
281        		strings_unk[2] = 'Unknown';
282        
283        		/* decide thresholds based on maximum number of characters! */
284        		*ORIGFISHAREATEXT_LEV_DIST = stringDist( ORIGFISHAREATEXT, ORIGFISHAREATEXT2, 5, strings_unk, 'complev', 0);
285        		ORIGFISHAREATEXT_GED_DIST = stringDist( ORIGFISHAREATEXT, ORIGFISHAREATEXT2, 500, strings_unk, 'compged', 0);
286        		*ORIGFISHAREATEXT_SPEDIS_DIST = stringDist( ORIGFISHAREATEXT, ORIGFISHAREATEXT2, 30, strings_unk, 'spedis', 0);
287        
288        		/* Code and text are indeed correlated. Therefore we check text differences
289        		 * just if we have the same code */
290        		if ( ORIGFISHAREA_HIER_DIST <= 0.5 ) then do;
291        			*ORIGFISHAREACOMB_LEV_DIST = ORIGFISHAREATEXT_LEV_DIST;
292        			ORIGFISHAREACOMB_GED_DIST = ORIGFISHAREATEXT_GED_DIST;
293        			*ORIGFISHAREACOMB_SPEDIS_DIST = ORIGFISHAREATEXT_SPEDIS_DIST;
294        		end;
295        		else do;
296        			*ORIGFISHAREACOMB_LEV_DIST = 1;
297        			ORIGFISHAREACOMB_GED_DIST = 1;
298        			*ORIGFISHAREACOMB_SPEDIS_DIST = 1;
299        		end;
300        
301        		*PRODTEXT_LEV_DIST = stringDist( PRODTEXT, PRODTEXT2, 5, strings_unk, 'complev', 0 );
302        		PRODTEXT_GED_DIST = stringDist( PRODTEXT, PRODTEXT2, 150, strings_unk, 'compged', 0 );
303        		*PRODTEXT_SPEDIS_DIST = stringDist( PRODTEXT, PRODTEXT2, 30, strings_unk, 'spedis', 0 );
304        
305        		*PRODBRANDNAME_LEV_DIST = stringDist( PRODBRANDNAME, PRODBRANDNAME2, 5, strings_unk, 'complev', 0 );
306        		PRODBRANDNAME_GED_DIST = stringDist( PRODBRANDNAME, PRODBRANDNAME2, 500, strings_unk, 'compged', 0 );
307        		*PRODBRANDNAME_SPEDIS_DIST = stringDist( PRODBRANDNAME, PRODBRANDNAME2, 30, strings_unk, 'spedis', 0 );
308        
309        		*PRODMANUF_LEV_DIST = stringDist( PRODMANUF, PRODMANUF2, 5, strings_unk, 'complev', 0 );
310        		PRODMANUF_GED_DIST = stringDist( PRODMANUF, PRODMANUF2, 500, strings_unk, 'compged', 0 );
311        		*PRODMANUF_SPEDIS_DIST = stringDist( PRODMANUF, PRODMANUF2, 30, strings_unk, 'spedis', 0 );
312        
313        		*PRODCOM_LEV_DIST = stringDist( PRODCOM, PRODCOM2, 5, strings_unk, 'complev', 0 );
314        		PRODCOM_GED_DIST = stringDist( PRODCOM, PRODCOM2, 500, strings_unk, 'compged', 0 );
315        		*PRODCOM_SPEDIS_DIST = stringDist( PRODCOM, PRODCOM2, 30, strings_unk, 'spedis', 0 );
316        
317        		*PROGCODE_LEV_DIST = stringDist( PROGCODE, PROGCODE2, 5, strings_unk, 'complev', 1 );
318        		PROGCODE_GED_DIST = stringDist( PROGCODE, PROGCODE2, 500, strings_unk, 'compged', 1 );
319        		*PROGCODE_SPEDIS_DIST = stringDist( PROGCODE, PROGCODE2, 30, strings_unk, 'spedis', 1 );
320        
321        		*PROGLEGALREF_LEV_DIST = stringDist( PROGLEGALREF, PROGLEGALREF2, 5, strings_unk, 'complev', 1 );
322        		PROGLEGALREF_GED_DIST = stringDist( PROGLEGALREF, PROGLEGALREF2, 500, strings_unk, 'compged', 1 );
323        		*PROGLEGALREF_SPEDIS_DIST = stringDist( PROGLEGALREF, PROGLEGALREF2, 30, strings_unk, 'spedis', 1 );
324        
325        		*LOCALORG_LEV_DIST = stringDist( LOCALORG, LOCALORG2, 5, strings_unk, 'complev', 0 );
326        		LOCALORG_GED_DIST = stringDist( LOCALORG, LOCALORG2, 500, strings_unk, 'compged', 0 );
327        		*LOCALORG_SPEDIS_DIST = stringDist( LOCALORG, LOCALORG2, 30, strings_unk, 'spedis', 0 );
328        
329        		*PARAMTEXT_LEV_DIST = stringDist( PARAMTEXT, PARAMTEXT2, 5, strings_unk, 'complev', 0 );
330        		PARAMTEXT_GED_DIST = stringDist( PARAMTEXT, PARAMTEXT2, 500, strings_unk, 'compged', 0 );
331        		*PARAMTEXT_SPEDIS_DIST = stringDist( PARAMTEXT, PARAMTEXT2, 30, strings_unk, 'spedis', 0 );
332        
6                                                       The SAS System                         14:56 Wednesday, August 23, 2017

333        		*ANMETHREFCODE_LEV_DIST = stringDist( ANMETHREFCODE, ANMETHREFCODE2, 5, strings_unk, 'complev', 1 );
334        		ANMETHREFCODE_GED_DIST = stringDist( ANMETHREFCODE, ANMETHREFCODE2, 500, strings_unk, 'compged', 1 );
335        		*ANMETHREFCODE_SPEDIS_DIST = stringDist( ANMETHREFCODE, ANMETHREFCODE2, 30, strings_unk, 'spedis', 1 );
336        
337        		*ANMETHTEXT_LEV_DIST = stringDist( ANMETHTEXT, ANMETHTEXT2, 5, strings_unk, 'complev', 0 );
338        		ANMETHTEXT_GED_DIST = stringDist( ANMETHTEXT, ANMETHTEXT2, 500, strings_unk, 'compged', 0 );
339        		*ANMETHTEXT_SPEDIS_DIST = stringDist( ANMETHTEXT, ANMETHTEXT2, 30, strings_unk, 'spedis', 0 );
340        
341        
342        		/* Code and text are indeed correlated. Therefore we check text differences
343        		 * just if we have the same code */
344        		if ( ANMETHCODE_HIER_DIST <= 0.5 ) then do;
345        			*ANMETHCOMB_LEV_DIST = ANMETHTEXT_LEV_DIST;
346        			ANMETHCOMB_GED_DIST = ANMETHTEXT_GED_DIST;
347        			*ANMETHCOMB_SPEDIS_DIST = ANMETHTEXT_SPEDIS_DIST;
348        		end;
349        		else do;
350        			*ANMETHCOMB_LEV_DIST = 1;
351        			ANMETHCOMB_GED_DIST = 1;
352        			*ANMETHCOMB_SPEDIS_DIST = 1;
353        		end;
354        
355        
356        		*RESCOMM_LEV_DIST = stringDist( RESCOMM, RESCOMM2, 5, strings_unk, 'complev', 0 );
357        		RESCOMM_GED_DIST = stringDist( RESCOMM, RESCOMM2, 500, strings_unk, 'compged', 0 );
358        		*RESCOMM_SPEDIS_DIST = stringDist( RESCOMM, RESCOMM2, 30, strings_unk, 'spedis', 0 );
359        
360        		/* numeric distances */
361        
362        		/* percentages has 0 as minimum and 100 as maximum */
363        		FATPERC_DIST = euclidDistNormalized(FATPERC, FATPERC2, 0, 100);
364        		MOISTPERC_DIST = euclidDistNormalized(MOISTPERC, MOISTPERC2, 0, 100);
365        
366        		/* output the created pair and go on with the cycle */
367        		output;
368        
369        		currentRow = currentRow + 1;
370        	end;
371        
372        	drop &varToDrop;
373        run;

NOTE: There were 7485149 observations read from the data set MYLIB.TRN_SET.
NOTE: The data set MYLIB.TRN_PAIRS has 98032101 observations and 71 variables.
NOTE: Compressing data set MYLIB.TRN_PAIRS decreased size by 63.04 percent. 
      Compressed is 1294064 pages; un-compressed would require 3501147 pages.
NOTE: DATA statement used (Total process time):
      real time           34:13:22.53
      cpu time            33:03:37.73
      

374        
375        GOPTIONS NOACCESSIBLE;
376        %LET _CLIENTTASKLABEL=;
377        %LET _CLIENTPROJECTPATH=;
378        %LET _CLIENTPROJECTNAME=;
379        %LET _SASPROGRAMFILE=;
380        
381        ;*';*";*/;quit;run;
382        ODS _ALL_ CLOSE;
383        
384        
385        QUIT; RUN;
386        
